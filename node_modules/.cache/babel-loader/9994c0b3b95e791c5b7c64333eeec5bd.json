{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\new demo\\\\my-app\\\\src\\\\component\\\\title\\\\title.js\";\nimport React from 'react'; // 导入antd\n\nimport { Button } from 'antd';\nimport 'antd/dist/antd.css'; // 导入redux相关\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { default as store } from '../../store/configureStore'; // 导入所有title action creator\n\nimport * as titleActionCreator from '../../action/titleAction';\n/**\r\n * Title组件\r\n * @author pangchun\r\n * @since  2021-9-29\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Title extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = () => {\n      // store.dispatch(titleActionCreator.changeTitleName('动感地带'));\n      this.props.titleAction.changeTitleName('动感地带');\n      console.log(this.props.title.titleName);\n    };\n\n    this.state = {\n      buttonName: '点击改变标题名称'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"titleName\",\n        children: [\"\\u6B22\\u8FCE\\u6765\\u5230\", this.props.titleName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: this.handleChange,\n        children: this.state.buttonName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/**\r\n * 关联redux的state到react的props\r\n * 子组件可以通过this.props.title.titleName直接从props取值\r\n */\n\n\nconst mapStateToProps = state => ({\n  title: state.title // 这里为什么可以这样写？请看combineReducers的说明\n  // 可以继续添加其它要同步到props的state\n\n});\n/**\r\n * 绑定action creator到props\r\n * 子组件可以通过this.props.titleAction.changeTitleName('param');的方式直接调用reducer去修改state，而不需要通过store.dispatch\r\n */\n\n\nconst mapDispatchToProps = dispatch => ({\n  titleAction: bindActionCreators(titleActionCreator, dispatch) // 可以继续添加其它要绑定到props的action\n\n});\n/**\r\n * 连接此组件到redux store\r\n * 请参考文档中的 connect api \r\n */\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Title);","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/new demo/my-app/src/component/title/title.js"],"names":["React","Button","connect","bindActionCreators","default","store","titleActionCreator","Title","Component","constructor","arguments","handleChange","props","titleAction","changeTitleName","console","log","title","titleName","state","buttonName","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAO,oBAAP,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAO,IAAIC,KAApB,QAAiC,4BAAjC,C,CACA;;AACA,OAAO,KAAKC,kBAAZ,MAAoC,0BAApC;AAEA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAN,SAAoBP,KAAK,CAACQ,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;;AADU,SAOdC,YAPc,GAOC,MAAM;AACjB;AACA,WAAKC,KAAL,CAAWC,WAAX,CAAuBC,eAAvB,CAAuC,MAAvC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,SAA7B;AACH,KAXa;;AAEV,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AADH,KAAb;AAGH;;AAQDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,+CAA+B,KAAKT,KAAL,CAAWM,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAE,KAAKP,YAArC;AAAA,kBAAoD,KAAKQ,KAAL,CAAWC;AAA/D;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AArB+B;AAwBpC;AACA;AACA;AACA;;;AACA,MAAME,eAAe,GAAIH,KAAD,KAAY;AAChCF,EAAAA,KAAK,EAAEE,KAAK,CAACF,KADmB,CACZ;AACpB;;AAFgC,CAAZ,CAAxB;AAKA;AACA;AACA;AACA;;;AACA,MAAMM,kBAAkB,GAAIC,QAAD,KAAe;AACtCX,EAAAA,WAAW,EAAEV,kBAAkB,CAACG,kBAAD,EAAqBkB,QAArB,CADO,CAEtC;;AAFsC,CAAf,CAA3B;AAKA;AACA;AACA;AACA;;;AACC,eAAetB,OAAO,CAACoB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ChB,KAA7C,CAAf","sourcesContent":["import React from 'react';\r\n// 导入antd\r\nimport { Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n// 导入redux相关\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { default as store}  from '../../store/configureStore';\r\n// 导入所有title action creator\r\nimport * as titleActionCreator from '../../action/titleAction';\r\n\r\n/**\r\n * Title组件\r\n * @author pangchun\r\n * @since  2021-9-29\r\n */\r\nclass Title extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            buttonName: '点击改变标题名称',\r\n        };\r\n    }\r\n\r\n    handleChange = () => {\r\n        // store.dispatch(titleActionCreator.changeTitleName('动感地带'));\r\n        this.props.titleAction.changeTitleName('动感地带');\r\n        console.log(this.props.title.titleName);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"title\">\r\n                <h1 className=\"titleName\">欢迎来到{this.props.titleName}</h1>\r\n                <Button type=\"primary\" onClick={this.handleChange}>{this.state.buttonName}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * 关联redux的state到react的props\r\n * 子组件可以通过this.props.title.titleName直接从props取值\r\n */\r\nconst mapStateToProps = (state) => ({\r\n    title: state.title, // 这里为什么可以这样写？请看combineReducers的说明\r\n    // 可以继续添加其它要同步到props的state\r\n});\r\n\r\n/**\r\n * 绑定action creator到props\r\n * 子组件可以通过this.props.titleAction.changeTitleName('param');的方式直接调用reducer去修改state，而不需要通过store.dispatch\r\n */\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    titleAction: bindActionCreators(titleActionCreator, dispatch),\r\n    // 可以继续添加其它要绑定到props的action\r\n});\r\n\r\n/**\r\n * 连接此组件到redux store\r\n * 请参考文档中的 connect api \r\n */\r\n export default connect(mapStateToProps, mapDispatchToProps)(Title);"]},"metadata":{},"sourceType":"module"}